#!/usr/bin/env ruby
require 'json'

comments = JSON.load(STDIN.read)

newmod  = ->(c) {{name: c[0].gsub('=', '').strip,
                  desc: c[2].strip,
                  doc: c[1..-1].join("\n").strip,
                  items: []}}

newitem = ->(c) {{type: c[1],
                  name: nil,
                  def: c[0],
                  doc: c[2..-1].join("\n").strip}}

ismod = ->(c) { c[0].include?('===') }
mods  = comments.select(&ismod).map(&newmod)
items = comments.reject(&ismod).map(&newitem)
orderedmods = mods.sort_by{|m|m[:name]}.reverse

sections = %w(Deprecated Command Constant Variable Function Constructor Method)
items.each do |item|
  mod = orderedmods.find{|mod| item[:def].start_with?(mod[:name]+'.', mod[:name]+':')}
  if mod.nil?
    abort "error: couldn't find module for #{item[:def]} (#{item[:type]}) (#{item[:doc]})"
  end
  item[:name] = item[:def][(mod[:name].size+1)..-1].match(/\w+/)[0]
  if not sections.include?(item[:type])
      abort "error: unknown type #{item[:type]} in #{mod[:name]}.#{item[:name]}. This is either a documentation error, or scripts/docs/bin/genjson and scripts/docs/templates/ext.html.erb need to be updated to know about this tpe"
  end
  mod[:items] << item
end

mods.sort_by!{|m|m[:name]}
puts JSON.pretty_generate(mods)
